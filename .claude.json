{
  "name": "Socials Automation Platform - Tunnel Architecture (Production Ready)",
  "description": "Subscription-based Socials automation platform with secure tunnel-based architecture using WebSocket for bidirectional client-server communication. Tunnel system is fully operational and deployed in production.",
  "version": "2.0.0-production",
  "completionDate": "2025-10-19",

  "projectType": "monorepo",
  "primaryLanguages": ["TypeScript", "JavaScript"],
  "frameworks": [
    "React",
    "TypeScript",
    "Electron",
    "Next.js",
    "Puppeteer",
    "ethers.js",
    "Socket.io"
  ],

  "architecture": {
    "overview": "Tunnel-based bidirectional communication between Electron client and Next.js server",
    "frontend": {
      "platform": "Electron 30+ + React 18 + TypeScript 5.x (Vite)",
      "automation": "Puppeteer 24+ with stealth plugins and ghost-cursor",
      "communication": "TunnelClient (Socket.IO client) for persistent WebSocket connection",
      "entryPoint": "react-electron/electron/main.ts",
      "tunnelClient": "react-electron/electron/tunnel-client.ts"
    },
    "backend": {
      "platform": "Next.js 15 (App Router) + Custom Server",
      "server": "backend/src/server.ts - Custom HTTP server with Socket.IO",
      "database": "PostgreSQL 16+ with pg driver and connection pooling",
      "tunnelServer": "backend/src/services/tunnel-server.ts",
      "authentication": "Device fingerprint-based (3-step hash generation)",
      "deployment": {
        "method": "PM2 process manager OR nohup (production)",
        "port": "80 (production) or 3000 (development)",
        "environment": "Loaded via dotenv from .env file"
      }
    },
    "blockchain": {
      "network": "Ethereum mainnet",
      "purpose": "NFT-based subscription verification",
      "library": "ethers.js 6.x",
      "nftListener": "backend/src/services/dynamic-nft-listener-manager.ts"
    },
    "storage": "Local SQLite for client data, PostgreSQL for server data",
    "communication": "Socket.IO 4.x - Persistent bidirectional WebSocket tunnel"
  },

  "currentStatus": {
    "phase": "✅ Production Ready & Deployed",
    "completionDate": "October 19, 2025",
    "status": "All systems operational",
    "achievements": [
      "✅ Tunnel architecture fully implemented and tested",
      "✅ Fingerprint authentication working correctly",
      "✅ Script delivery through tunnel successful",
      "✅ Reconnection logic tested and stable",
      "✅ PostgreSQL connection issues resolved",
      "✅ dotenv configuration fixed in custom Next.js server",
      "✅ Production deployment on Ubuntu server successful",
      "✅ Socket disconnection bug fixed (socket ID comparison)",
      "✅ 500ms script delivery delay removed",
      "✅ Connection age checks implemented"
    ],
    "productionMetrics": {
      "tunnelConnectionTime": "~2 seconds",
      "scriptDeliveryTime": "< 1 second (immediate after authentication)",
      "pingInterval": "25 seconds",
      "pingTimeout": "120 seconds",
      "reconnectionDelay": "1s (exponential backoff up to 32s)"
    }
  },

  "systemFlow": {
    "description": "Complete flow from client authentication to script execution",
    "steps": [
      {
        "step": 1,
        "name": "Fingerprint Authentication",
        "file": "backend/src/app/api/auth/fingerprint/route.ts",
        "description": "Client sends hardware fingerprint (CPU, GPU, RAM, OS) to server",
        "process": [
          "Client collects device fingerprint data",
          "Step 1 hash: cpu.model + gpu.renderer + os.architecture + webgl",
          "Step 2 hash: cpu.architecture + gpu.memory + os.platform",
          "Final device hash: step1Hash + step2Hash + clientIPv4",
          "Server stores device hash in PostgreSQL users table",
          "Server returns deviceHash and sessionToken to client"
        ],
        "output": "deviceHash (unique identifier), sessionToken (for this session)"
      },
      {
        "step": 2,
        "name": "Tunnel Connection Establishment",
        "file": "react-electron/electron/tunnel-client.ts",
        "description": "Client connects to WebSocket tunnel endpoint",
        "process": [
          "Client creates Socket.IO connection to wss://api.mrpicule.xyz/tunnel",
          "Socket.IO settings: pingTimeout=120s, pingInterval=25s, reconnection=true",
          "Client emits 'client:authenticate' event with deviceHash",
          "Server validates deviceHash against PostgreSQL users table",
          "Server creates TunnelConnection object and stores in activeConnections Map",
          "Server checks for existing connection (reconnection scenario)",
          "If reconnection: disconnect old socket only if different socket ID",
          "Server emits 'server:authenticated' event with success confirmation"
        ],
        "output": "Authenticated tunnel connection established"
      },
      {
        "step": 3,
        "name": "Script Delivery",
        "file": "backend/src/services/tunnel-server.ts (sendScriptsToClient method)",
        "description": "Server immediately sends accessible scripts to client",
        "process": [
          "Server retrieves user subscription level from SubscriptionManager",
          "Server fetches accessible script IDs based on NFT ownership",
          "Server loads full script content from scripts_library table",
          "Server creates NFT+Script pairs for frontend display",
          "Server encrypts script data using AES-256 with device key",
          "Server emits 'server:scripts' event with encrypted payload",
          "NO DELAY - scripts sent immediately after authentication"
        ],
        "timing": "< 1 second after authentication",
        "output": "Encrypted scripts delivered to client via tunnel"
      },
      {
        "step": 4,
        "name": "Script Execution",
        "file": "react-electron/electron/main.ts",
        "description": "Client receives, decrypts, and executes scripts in Puppeteer",
        "process": [
          "TunnelClient receives 'server:scripts' event",
          "Client decrypts script payload using device key",
          "Client stores scripts in memory (no disk write for security)",
          "User selects script from UI",
          "Main process spawns child process with Puppeteer",
          "Script executes with stealth plugins and ghost-cursor",
          "Results sent back through tunnel via 'client:scriptResult' event"
        ],
        "output": "Script execution results"
      },
      {
        "step": 5,
        "name": "Bidirectional Communication",
        "files": [
          "backend/src/services/tunnel-server.ts",
          "react-electron/electron/tunnel-client.ts"
        ],
        "description": "Persistent WebSocket connection for real-time updates",
        "features": [
          "Heartbeat: Client sends ping every 25s, server responds with pong",
          "Server can push updates: new scripts, subscription changes, alerts",
          "Client can send events: script status, errors, profile updates",
          "Automatic reconnection with exponential backoff (1s → 32s max)",
          "Message queuing during disconnection",
          "Connection age check: wait 200ms if connection < 100ms old"
        ],
        "events": {
          "client_to_server": [
            "client:authenticate (deviceHash)",
            "client:ping (heartbeat)",
            "client:scriptResult (execution results)",
            "client:error (error reports)"
          ],
          "server_to_client": [
            "server:authenticated (auth confirmation)",
            "server:scripts (script delivery)",
            "server:pong (heartbeat response)",
            "server:update (real-time updates)",
            "server:error (error messages)"
          ]
        }
      }
    ]
  },

  "productionDeployment": {
    "server": {
      "os": "Ubuntu 24.04 LTS",
      "node": "Node.js 20.19.5",
      "database": "PostgreSQL 16.10",
      "location": "/root/react-electron/backend"
    },
    "environmentVariables": {
      "file": "/root/react-electron/backend/.env",
      "required": [
        "DB_HOST=localhost",
        "DB_PORT=5432",
        "DB_NAME=twitter_automation",
        "DB_USER=postgres",
        "DB_PASSWORD=<your_password>",
        "PORT=80",
        "NODE_ENV=production",
        "TUNNEL_ENDPOINT=wss://api.mrpicule.xyz/tunnel",
        "ENCRYPTION_KEY=<32_byte_hex>",
        "FINGERPRINT_SALT=<32_byte_hex>",
        "CORS_ORIGINS=<comma_separated_origins>",
        "ADMIN_IPS=<comma_separated_ips>"
      ],
      "notes": [
        "DO NOT put any commands in .env file (e.g., 'npm install --production')",
        "First line MUST be a comment or environment variable",
        ".env file is loaded via 'import dotenv/config' in server.ts line 1"
      ]
    },
    "startupMethods": {
      "pm2": {
        "description": "Process manager with auto-restart and monitoring",
        "config": "backend/ecosystem.config.js",
        "commands": [
          "cd /root/react-electron/backend",
          "pm2 start ecosystem.config.js",
          "pm2 save",
          "pm2 startup"
        ],
        "features": [
          "Auto-restart on crash",
          "Auto-start on server reboot",
          "Log management (logs/out.log, logs/err.log)",
          "Memory limit (1GB)",
          "Process monitoring (pm2 monit)"
        ],
        "troubleshooting": [
          "If PM2 fails with tsx error: check ecosystem.config.js interpreter path",
          "If infinite restart loop: check server.ts for syntax errors",
          "View logs: pm2 logs twitter-backend"
        ]
      },
      "nohup": {
        "description": "Simple background process (currently used in production)",
        "commands": [
          "cd /root/react-electron/backend",
          "pkill -f node  # Kill existing processes",
          "nohup npm start > server.log 2>&1 &",
          "disown",
          "tail -f server.log  # Monitor logs"
        ],
        "pros": [
          "Simple and reliable",
          "No PM2 configuration needed",
          "Works immediately"
        ],
        "cons": [
          "No auto-restart on crash",
          "No auto-start on reboot",
          "Manual process management (need to find PID to kill)"
        ]
      }
    },
    "databaseSetup": {
      "authentication": "PostgreSQL uses scram-sha-256 by default",
      "passwordSetup": [
        "sudo -u postgres psql",
        "ALTER USER postgres WITH PASSWORD 'your_password';",
        "\\q"
      ],
      "connectionTest": [
        "psql -U postgres -d twitter_automation -h localhost",
        "Enter password when prompted",
        "Should connect successfully"
      ],
      "configFile": "/etc/postgresql/16/main/pg_hba.conf",
      "requiredSettings": [
        "host    all    all    127.0.0.1/32    scram-sha-256"
      ]
    },
    "commonIssues": {
      "issue1": {
        "symptom": "Server starts on port 3000 instead of 80",
        "cause": ".env file not loaded or PORT variable not set",
        "solution": [
          "Ensure 'import dotenv/config' is FIRST line in server.ts",
          "Check .env file has PORT=80",
          "Restart server: pkill -f node && nohup npm start > server.log 2>&1 &"
        ]
      },
      "issue2": {
        "symptom": "PostgreSQL authentication failed for user postgres",
        "cause": "Password mismatch or connection pool using old credentials",
        "solution": [
          "Set correct password: sudo -u postgres psql -c \"ALTER USER postgres WITH PASSWORD 'your_password';\"",
          "Update .env with correct DB_PASSWORD",
          "Restart server to create new connection pool"
        ]
      },
      "issue3": {
        "symptom": "Tunnel connects but immediately disconnects",
        "cause": "Database connection error or authentication failure",
        "solution": [
          "Check server logs: tail -f server.log",
          "Look for PostgreSQL errors",
          "Verify deviceHash exists in users table"
        ]
      },
      "issue4": {
        "symptom": "TransformError when starting server",
        "cause": "Invalid syntax in server.ts (e.g., '\\\\' at line 1)",
        "solution": [
          "Edit server.ts: nano /root/react-electron/backend/src/server.ts",
          "Ensure first line is: import 'dotenv/config';",
          "Remove any extra characters or comments before imports"
        ]
      }
    }
  },

  "technicalRequirements": {
    "tunnel": {
      "protocol": "Socket.IO 4.x over WebSocket",
      "endpoint": "/tunnel",
      "socketIOSettings": {
        "pingTimeout": "120000ms (2 minutes)",
        "pingInterval": "25000ms (25 seconds)",
        "connectTimeout": "45000ms (45 seconds)",
        "transports": ["websocket", "polling"],
        "reconnection": true,
        "reconnectionAttempts": 10,
        "reconnectionDelay": "1000ms (exponential backoff)",
        "reconnectionDelayMax": "32000ms (32 seconds)",
        "forceNew": false,
        "upgrade": true
      },
      "features": [
        "Persistent bidirectional connection",
        "Automatic reconnection with exponential backoff",
        "Message queuing during disconnection (client-side)",
        "Heartbeat system (ping/pong every 25s)",
        "Connection age check (wait 200ms if connection < 100ms old)",
        "Device fingerprint authentication",
        "AES-256 encrypted message payload",
        "Socket ID comparison to prevent disconnecting current socket"
      ],
      "security": [
        "Device hash validated on every tunnel message",
        "Encrypted payload using device-specific key",
        "HMAC signature for message integrity",
        "Automatic disconnect on security violation",
        "IP address validation"
      ]
    },
    "authentication": {
      "method": "Device fingerprint-based (3-step hashing)",
      "step1": "Primary hash: cpu.model + gpu.renderer + os.architecture + webgl",
      "step2": "Secondary hash: cpu.architecture + gpu.memory + os.platform",
      "step3": "Final device hash: step1Hash + step2Hash + clientIPv4",
      "components": ["CPU", "GPU", "RAM", "Screen", "Timezone", "IP", "OS"],
      "hashing": "Custom hash + SHA-256 (backend only)",
      "backup": "5 email addresses for account recovery",
      "walletOptional": "Optional Ethereum wallet address for NFT verification"
    },
    "database": {
      "system": "PostgreSQL 16+",
      "connectionPool": {
        "max": 20,
        "idleTimeoutMillis": 30000,
        "connectionTimeoutMillis": 2000
      },
      "authentication": "scram-sha-256",
      "ssl": false,
      "configFile": "backend/src/config/database.ts",
      "tables": [
        "users (id, device_hash, device_fingerprint, wallet_address, nonce, created_at, last_active)",
        "profiles (id, user_id, twitter_username, twitter_user_id, cookies, status)",
        "scripts_library (id, script_id, name, description, version, nft_addresses, script_content)",
        "user_scripts (user_id, script_id, enabled, created_at)",
        "nft_cache (wallet_address, contract_address, network, count, last_verified)"
      ]
    },
    "scriptExecution": {
      "platform": "Puppeteer 24+ in Electron child process",
      "security": "Memory-only execution (no disk writes)",
      "stealth": [
        "puppeteer-extra-plugin-stealth (avoid detection)",
        "ghost-cursor (human-like mouse movements)",
        "Random delays between actions",
        "User-agent rotation"
      ],
      "isolation": "Each script runs in separate child process",
      "monitoring": "Script status tracked in activeScripts Map"
    }
  },

  "bugFixes": {
    "october2025": [
      {
        "date": "2025-10-18",
        "commit": "2c5a5d7",
        "issue": "Server immediately disconnects client after tunnel authentication",
        "rootCause": "Server was disconnecting NEW socket thinking it was an old one",
        "symptoms": [
          "Tunnel connects successfully",
          "Server authenticates client",
          "Server immediately emits disconnect",
          "Scripts never delivered"
        ],
        "solution": {
          "file": "backend/src/services/tunnel-server.ts",
          "changes": [
            "Added socket ID comparison: only disconnect if existingConnection.socketId !== socket.id",
            "Removed 500ms delay before sending scripts",
            "Added connection age check: wait 200ms if connection < 100ms old",
            "Added connectedAt timestamp to TunnelConnection interface",
            "Enhanced logging with socket IDs and timestamps"
          ]
        },
        "testing": "Client now receives scripts within 1 second of authentication"
      },
      {
        "date": "2025-10-19",
        "commit": "HEAD",
        "issue": "Server starts but .env variables not loaded (PORT defaults to 3000)",
        "rootCause": "Custom Next.js server does not auto-load .env files",
        "symptoms": [
          "Server starts on port 3000 instead of 80",
          "PostgreSQL password authentication fails",
          "Fingerprint route works but tunnel fails"
        ],
        "solution": {
          "file": "backend/src/server.ts",
          "changes": [
            "Added 'import dotenv/config' as FIRST line (before all other imports)",
            "This ensures .env is loaded BEFORE any modules import config/database.ts",
            "Connection pool now created with correct environment variables"
          ]
        },
        "relatedIssue": {
          "symptom": "Fingerprint route works but tunnel authentication fails with DB error",
          "cause": "Next.js auto-loads .env for API routes, but NOT for custom server code",
          "explanation": "tunnel-server.ts is imported in server.ts BEFORE Next.js initializes, so .env not loaded yet"
        },
        "testing": "Server now starts on PORT=80 and PostgreSQL connections work correctly"
      },
      {
        "date": "2025-10-19",
        "issue": "PostgreSQL password authentication failed despite correct password in .env",
        "rootCause": "Password in PostgreSQL database did not match .env file",
        "symptoms": [
          "Manual psql connection works when typing password",
          "Node.js pg library fails with 'password authentication failed'",
          "Error occurs in tunnel-server but not in fingerprint route"
        ],
        "solution": {
          "command": "sudo -u postgres psql -c \"ALTER USER postgres WITH PASSWORD 'your_password';\"",
          "explanation": "PostgreSQL uses scram-sha-256 by default, password must match exactly",
          "restart": "Must restart Node.js server after password change to create new connection pool"
        },
        "testing": "After password reset and server restart, both fingerprint and tunnel connections work"
      }
    ]
  },

  "migrationChecklist": [
    "✅ Design tunnel protocol and message format",
    "✅ Implement tunnel server (backend/src/services/tunnel-server.ts)",
    "✅ Implement tunnel client (react-electron/electron/tunnel-client.ts)",
    "✅ Migrate ping system to tunnel-based heartbeat",
    "✅ Migrate script delivery to tunnel push (immediate after auth)",
    "✅ Update device authentication for tunnel",
    "✅ Add reconnection logic with exponential backoff",
    "✅ Remove old HTTP callback code (CallbackServer)",
    "✅ Remove UPnP and firewall setup code",
    "✅ Update main.ts to use TunnelClient",
    "✅ Update confirm-connection route with tunnel info",
    "✅ Fix socket disconnection bug (socket ID comparison)",
    "✅ Fix dotenv loading in custom Next.js server",
    "✅ Fix PostgreSQL authentication issues",
    "✅ Remove 500ms script delivery delay",
    "✅ Add connection age checks",
    "✅ Test bidirectional communication (SUCCESS)",
    "✅ Deploy to production server (SUCCESS)",
    "✅ Test in production environment (SUCCESS)"
  ],

  "performanceMetrics": {
    "tunnel": {
      "connection_time": "~2 seconds (actual)",
      "ping_latency": "< 100ms (actual)",
      "message_delivery": "< 1 second (actual)",
      "reconnection_time": "< 5 seconds (actual)",
      "script_delivery": "< 1 second after authentication (immediate)"
    },
    "script_execution": {
      "delivery_time": "< 1 second",
      "load_to_memory": "< 500ms",
      "execution_start": "< 2 seconds",
      "puppeteer_launch": "5-10 seconds (chromium startup)"
    },
    "database": {
      "query_time": "< 50ms (local PostgreSQL)",
      "connection_pool": "20 max connections",
      "idle_timeout": "30 seconds"
    }
  },

  "codeStyle": {
    "indentation": 2,
    "quotes": "single",
    "semicolons": true,
    "trailingComma": "es5",
    "maxLineLength": 100,
    "typescript": {
      "strict": true,
      "noImplicitAny": true,
      "strictNullChecks": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "interfaces": "PascalCase",
      "types": "PascalCase",
      "enums": "PascalCase"
    },
    "react": {
      "components": "PascalCase",
      "hooks": "camelCase with 'use' prefix",
      "props": "camelCase",
      "functionalComponents": "arrow functions with explicit return type"
    },
    "naming": {
      "files": "kebab-case",
      "functions": "camelCase",
      "classes": "PascalCase",
      "constants": "UPPER_SNAKE_CASE",
      "privateFields": "prefix with underscore (_privateField)"
    }
  },

  "securityRequirements": {
    "development": {
      "antiDebug": false,
      "devTools": true,
      "logging": "verbose",
      "sourceMaps": true
    },
    "production": {
      "antiDebug": true,
      "devTools": false,
      "logging": "error only",
      "sourceMaps": false,
      "measures": [
        "Memory-only script execution (no disk writes)",
        "Anti-debugging detection (0.5s app quit)",
        "DevTools blocking (F12, Ctrl+Shift+I, Ctrl+Shift+C)",
        "Device fingerprint validation on each tunnel message",
        "AES-256 encrypted tunnel communications",
        "WebSocket connection monitoring",
        "Automatic disconnect on security violation",
        "HMAC signature verification for all messages"
      ]
    },
    "authentication": {
      "method": "Device fingerprint-based (3-step hashing)",
      "components": ["CPU", "GPU", "RAM", "Screen", "Timezone", "IP", "OS"],
      "hashing": "Custom hash + SHA-256 (backend only)",
      "backup": "5 email addresses for recovery",
      "walletOptional": "Ethereum wallet for NFT verification"
    }
  },

  "technologies": {
    "frontend": [
      "React 18",
      "TypeScript 5.x",
      "Electron 30+",
      "Vite 5.x",
      "vite-plugin-electron",
      "Puppeteer 24+",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "ghost-cursor",
      "socket.io-client 4.x",
      "crypto-js",
      "express 4.x"
    ],
    "backend": [
      "Next.js 15 (App Router)",
      "PostgreSQL 16+",
      "socket.io 4.x",
      "ws",
      "ethers.js 6.x",
      "dotenv",
      "crypto-js",
      "helmet",
      "morgan",
      "winston",
      "node-cron",
      "tsx 4.x"
    ],
    "development": ["ESLint", "TypeScript ESLint", "Nodemon"]
  },

  "excludeFromContext": [
    "node_modules/",
    "dist/",
    "build/",
    "out/",
    ".next/",
    "*.log",
    ".env*",
    "coverage/",
    ".vscode/",
    ".idea/",
    "*.min.js",
    "*.map",
    "release/",
    ".tsx-cache/"
  ],

  "documentationLinks": {
    "socket_io": "https://socket.io/docs/v4/",
    "puppeteer": "https://pptr.dev/",
    "electron": "https://www.electronjs.org/docs/latest/",
    "next_js": "https://nextjs.org/docs",
    "ethers_js": "https://docs.ethers.org/v6/",
    "postgresql": "https://www.postgresql.org/docs/16/"
  }
}
