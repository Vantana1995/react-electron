/**
 * Twitter GM Commenter Script
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
 */

const fs = require('fs');
const path = require('path');

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
 */
function loadScreenshotCounter(saveImagesFolder, profileId) {
  if (!saveImagesFolder) return 1;

  const counterFile = path.join(saveImagesFolder, `screenshot_counter_${profileId}.json`);

  try {
    if (fs.existsSync(counterFile)) {
      const data = JSON.parse(fs.readFileSync(counterFile, 'utf8'));
      return data.counter || 1;
    }
  } catch (error) {
    console.error('Error loading screenshot counter:', error);
  }

  return 1;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
 */
function saveScreenshotCounter(saveImagesFolder, profileId, counter) {
  if (!saveImagesFolder) return;

  const counterFile = path.join(saveImagesFolder, `screenshot_counter_${profileId}.json`);

  try {
    fs.writeFileSync(counterFile, JSON.stringify({ counter }));
  } catch (error) {
    console.error('Error saving screenshot counter:', error);
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
 */
function loadProcessedTweets(saveImagesFolder, profileId) {
  if (!saveImagesFolder) return new Set();

  const tweetsFile = path.join(saveImagesFolder, `processed_tweets_${profileId}.json`);

  try {
    if (fs.existsSync(tweetsFile)) {
      const data = JSON.parse(fs.readFileSync(tweetsFile, 'utf8'));
      return new Set(data.tweets || []);
    }
  } catch (error) {
    console.error('Error loading processed tweets:', error);
  }

  return new Set();
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
 */
function saveProcessedTweets(saveImagesFolder, profileId, tweets) {
  if (!saveImagesFolder) return;

  const tweetsFile = path.join(saveImagesFolder, `processed_tweets_${profileId}.json`);

  try {
    fs.writeFileSync(tweetsFile, JSON.stringify({ tweets: Array.from(tweets) }));
  } catch (error) {
    console.error('Error saving processed tweets:', error);
  }
}

/**
 * –ò–∑–º–µ—Ä–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
async function measureDistanceToCommentInput(page) {
  return await page.evaluate(() => {
    const inputField = document.querySelector('div[data-testid="tweetTextarea_0RichTextInputContainer"]');

    if (!inputField) {
      window.scrollBy({ top: 500, behavior: 'smooth' });
      return null;
    }

    const rect = inputField.getBoundingClientRect();
    const distanceFromTop = window.pageYOffset + rect.bottom;

    console.log(`üìè –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${distanceFromTop}px –æ—Ç –≤–µ—Ä—Ö–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
    return distanceFromTop;
  });
}

/**
 * –í—ã—á–∏—Å–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É viewport –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 */
async function calculateOptimalViewportHeight(page) {
  const maxAttempts = 10;
  let attempts = 0;

  while (attempts < maxAttempts) {
    const distance = await measureDistanceToCommentInput(page);

    if (distance !== null) {
      const optimalHeight = Math.round(Math.min(distance + 400, 3000));
      console.log(`üîß –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≤—å—é–ø–æ—Ä—Ç–∞: ${optimalHeight}px`);
      return optimalHeight;
    }

    await new Promise((resolve) => setTimeout(resolve, 1000));
    attempts++;
  }

  console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É');
  return 1080;
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Twitter
 */
async function captureTwitterContentScreenshot(page, screenshotPath) {
  try {
    await new Promise((resolve) => setTimeout(resolve, 2000));

    await page.screenshot({
      path: screenshotPath,
      fullPage: false,
      type: 'png',
    });

    console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${screenshotPath}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
  }
}

async function executeScript(context) {
  const { page, browser, config, profile } = context;

  console.log('üöÄ Starting Twitter GM Commenter');
  console.log('üìã Profile:', profile.name);
  console.log('‚öôÔ∏è Config:', config);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ customData –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç—ã
  const navigationUrl = config.navigationUrl || "https://x.com/search?q=(web3%20OR%20crypto%20OR%20ticker)%20AND%20(GM%20or%20%22good%20morning%22%20OR%20%22shill%22)%20-god%20-bot%20(include%3Anativeretweets%20(filter%3Aself_threads%20OR%20-filter%3Anativeretweets%20-filter%3Aretweets%20-filter%3Aquote%20-filter%3Areplies))%20filter%3Ablue_verified%20lang%3Aen&src=typed_query&f=live";

  const regexPattern = config.regexPattern || "\\b(crypto|web3|ticker|memecoin)\\b";

  // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –º–∞—Å—Å–∏–≤
  const commentTemplates = Array.isArray(config.commentTemplates)
    ? config.commentTemplates
    : [];

  const delayBetweenActions = config.delayBetweenActions || 2000;
  const maxWordCount = config.maxWordCount || 200;
  const notOlderThanHours = config.notOlderThanHours || 5; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö
  const saveImagesFolder = config.saveImagesFolder || "";

  console.log(`‚è±Ô∏è Time filter: Not older than ${notOlderThanHours} hours`);
  console.log(`üí¨ Comment templates loaded: ${commentTemplates.length} templates`);
  console.log(`üìÅ Save images folder: ${saveImagesFolder || 'Not set'}`);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ø—Ä–æ–∫—Å–∏
  const profileId = profile.proxy ? `${profile.proxy.ip}_${profile.proxy.port}` : 'default';

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–≤–∏—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  const processedTweets = loadProcessedTweets(saveImagesFolder, profileId);
  console.log(`üìã Loaded ${processedTweets.size} processed tweets from file`);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  let screenshotCounter = loadScreenshotCounter(saveImagesFolder, profileId);
  console.log(`üì∏ Screenshot counter initialized: ${screenshotCounter}`);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  await page.goto(navigationUrl, {
    waitUntil: "networkidle2",
  });

  console.log(`‚úÖ Navigated to: ${navigationUrl}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const errorType = await checkPageErrors(page);
  if (errorType) {
    return {
      success: false,
      error: `Page error detected: ${errorType}`,
      errorType
    };
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–∏—Ç–æ–≤
  let processedCount = 0;
  const maxScrolls = 10; // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
  let scrollCount = 0;

  while (scrollCount < maxScrolls) {
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}, –ü—Ä–æ–∫—Ä—É—Ç–∫–∞: ${scrollCount}/${maxScrolls}`);

    // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–≤–∏—Ç–æ–≤
    const gmTweets = await page.evaluate((pattern, maxHours) => {
      const gmRegex = new RegExp(pattern, 'i');
      const tweets = Array.from(document.querySelectorAll("article"));
      const now = new Date();

      return tweets
        .map((tweet) => {
          const userDescription = tweet.closest('[data-testid="UserDescription"]');
          if (userDescription) return null;

          const tweetText = tweet.textContent || tweet.innerText;
          if (!gmRegex.test(tweetText)) return null;

          const timeElement = tweet.querySelector("time");
          if (!timeElement) return null;

          const datetime = timeElement.getAttribute("datetime");
          if (!datetime) return null;

          const tweetTime = new Date(datetime);
          const diffHours = (now - tweetTime) / (1000 * 60 * 60);
          if (diffHours > maxHours) return null;

          const tweetLink = tweet.querySelector('a[href*="/status/"]');
          const userLink = tweet.querySelector('a[href^="/"][role="link"]');
          if (!tweetLink || !userLink) return null;

          return {
            tweetUrl: tweetLink.href,
            userHref: userLink.getAttribute("href"),
            tweetText: tweetText.substring(0, 500) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
          };
        })
        .filter(Boolean);
    }, regexPattern, notOlderThanHours);

    console.log(`üîç Found ${gmTweets.length} matching tweets`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤
    for (const tweet of gmTweets) {
      if (processedTweets.has(tweet.tweetUrl)) {
        console.log(`‚è≠ Tweet ${tweet.tweetUrl} already processed`);
        continue;
      }

      // –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ —Ç–≤–∏—Ç–µ
      const wordCount = tweet.tweetText.split(/\s+/).length;
      if (wordCount > maxWordCount) {
        console.log(`üìä Tweet too long: ${wordCount} words (max ${maxWordCount}) - skipping`);
        continue;
      }

      console.log(`üìù Processing tweet (${wordCount} words): ${tweet.tweetUrl}`);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–∏—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
      const result = await processTweet(browser, tweet, commentTemplates, delayBetweenActions, {
        saveImagesFolder,
        screenshotCounter,
        profileId
      });

      if (result.success) {
        processedTweets.add(tweet.tweetUrl);
        processedCount++;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–≤–∏—Ç –≤ —Ñ–∞–π–ª
        saveProcessedTweets(saveImagesFolder, profileId, processedTweets);

        // –ï—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª —Å–¥–µ–ª–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if (result.screenshotTaken) {
          screenshotCounter++;
          saveScreenshotCounter(saveImagesFolder, profileId, screenshotCounter);
        }

        console.log(`‚úÖ Tweet processed successfully (total: ${processedCount})`);
      } else {
        console.log(`‚ùå Failed to process tweet: ${result.error}`);
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
      await delay(delayBetweenActions);
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤
    await page.evaluate(() => {
      window.scrollBy({ top: 1000, behavior: "smooth" });
    });

    await delay(2000);
    scrollCount++;
  }

  return {
    success: true,
    processedCount,
    totalTweets: processedTweets.size,
    processedTweets: Array.from(processedTweets)
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–≤–∏—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ (–¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
 */
async function processTweet(browser, tweet, commentTemplates, delayTime, screenshotOptions = {}) {
  let tempPage = null;
  let tweetPage = null;

  try {
    const { saveImagesFolder, screenshotCounter, profileId } = screenshotOptions;

    // –≠–¢–ê–ü 1: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
    console.log(`üîó Opening tweet in temporary tab for measurement: ${tweet.tweetUrl}`);
    tempPage = await browser.newPage();
    await tempPage.setViewport({ width: 1920, height: 1080 });
    await tempPage.goto(tweet.tweetUrl, { waitUntil: "networkidle2" });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    const errorType = await checkPageErrors(tempPage);
    if (errorType) {
      return { success: false, error: `Page error: ${errorType}` };
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–≤–∏—Ç–∞
    await tempPage.waitForSelector("article", { timeout: 5000 });

    // –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
    if (!commentTemplates || commentTemplates.length === 0) {
      console.log('‚ÑπÔ∏è No comment templates, skipping comment');
      return { success: true, action: 'viewed', screenshotTaken: false };
    }

    // –ò–∑–º–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É viewport –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    console.log('üìè –ò–∑–º–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...');
    const optimalHeight = await calculateOptimalViewportHeight(tempPage);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await tempPage.close();
    tempPage = null;

    // –≠–¢–ê–ü 2: –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    console.log(`üñ•Ô∏è Opening tweet with optimal viewport height: ${optimalHeight}px`);
    tweetPage = await browser.newPage();
    await tweetPage.setViewport({ width: 1920, height: optimalHeight });
    await tweetPage.goto(tweet.tweetUrl, { waitUntil: "networkidle2" });

    await tweetPage.waitForSelector("article", { timeout: 5000 });

    // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const randomComment = commentTemplates[Math.floor(Math.random() * commentTemplates.length)];
    console.log(`üí¨ Comment: ${randomComment}`);

    // –ü–æ–∏—Å–∫ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const commentInput = await tweetPage.$('div[data-testid="tweetTextarea_0RichTextInputContainer"]');

    if (!commentInput) {
      console.log('‚ùå Comment input not found');
      return { success: false, error: 'Comment input not found' };
    }

    // –ö–ª–∏–∫ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    await commentInput.click();
    await delay(500);

    // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const textArea = await tweetPage.$('div[data-testid="tweetTextarea_0"]');
    if (!textArea) {
      return { success: false, error: 'Text area not found' };
    }

    await textArea.type(randomComment, { delay: 50 }); // –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    await delay(delayTime);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const sendButton = await tweetPage.$('button[data-testid="tweetButtonInline"]');
    if (!sendButton) {
      return { success: false, error: 'Send button not found' };
    }

    await sendButton.click();
    await delay(8000); // –ñ–¥–µ–º 8 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º (–∫–∞–∫ –≤ bot5.js)

    console.log('‚úÖ Comment sent successfully');

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    let screenshotTaken = false;
    if (saveImagesFolder && screenshotCounter !== undefined) {
      try {
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ (100 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞ –ø–∞–ø–∫—É)
        const folderNumber = Math.floor((screenshotCounter - 1) / 100) + 1;
        const folderName = `screenshots_${folderNumber}`;
        const folderPath = path.join(saveImagesFolder, folderName);

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(folderPath)) {
          fs.mkdirSync(folderPath, { recursive: true });
          console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞: ${folderPath}`);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
        const screenshotFileName = `${screenshotCounter}.png`;
        const screenshotPath = path.join(folderPath, screenshotFileName);

        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await captureTwitterContentScreenshot(tweetPage, screenshotPath);
        screenshotTaken = true;
      } catch (screenshotError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', screenshotError);
      }
    }

    return { success: true, action: 'commented', comment: randomComment, screenshotTaken };

  } catch (error) {
    console.error(`Error processing tweet ${tweet.tweetUrl}:`, error);
    return { success: false, error: error.message };
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±–µ –≤–∫–ª–∞–¥–∫–∏
    if (tempPage && !tempPage.isClosed()) {
      try {
        await tempPage.close();
        console.log('üóô Temporary measurement tab closed');
      } catch (closeError) {
        console.error('Error closing temp tab:', closeError);
      }
    }

    if (tweetPage && !tweetPage.isClosed()) {
      try {
        await tweetPage.close();
        console.log('üóô Tweet tab closed');
      } catch (closeError) {
        console.error('Error closing tweet tab:', closeError);
      }
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
async function checkPageErrors(page) {
  return page.evaluate(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const errorElement = document.querySelector('[data-testid="error-detail"]');
    if (errorElement && errorElement.textContent.includes("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")) {
      return "page_not_found";
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CAPTCHA
    const captchaIndicatorText = document.querySelector(".core-msg.spacer.spacer-top");
    const verifyingIndicator = document.querySelector(".spacer.loading-verifying");
    const challengeSuccess = document.querySelector("#challenge-success-text");

    if (captchaIndicatorText || verifyingIndicator || challengeSuccess) {
      return "captcha";
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    const spans = Array.from(document.querySelectorAll("span"));
    if (spans.some((span) => {
      const isInSidebar = span.closest('[data-testid="sidebarColumn"]');
      return !isInSidebar && span.innerText.includes("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
    })) {
      return "restricted";
    }

    return null;
  });
}

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞
 */
function delay(ms) {
  const min = ms || 28985;
  const max = ms ? ms + 20000 : 47987;
  const randomDelay = Math.floor(Math.random() * (max - min + 1)) + min;
  return new Promise((resolve) => setTimeout(resolve, randomDelay));
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = executeScript;
}