/**
 * Example Server-Side Script
 * This script contains ONLY the execution logic
 * All configurations come from the client side
 */

async function executeScript(context) {
  const { page, browser, config, profile } = context;

  console.log('üìú Script started with config:', config);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π Twitter)
  await page.goto(config.navigationUrl, {
    waitUntil: "networkidle2",
  });

  console.log(`‚úÖ Navigated to: ${config.navigationUrl}`);

  // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  await page.waitForSelector('[data-testid="primaryColumn"]', { timeout: 10000 });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º regex –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  const regexPattern = new RegExp(config.regexPattern, 'i');

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–≤–∏—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º regex –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  const gmTweets = await page.evaluate((pattern) => {
    const gmRegex = new RegExp(pattern, 'i');
    const tweets = [];

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–≤–∏—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const tweetElements = document.querySelectorAll('[data-testid="tweet"]');

    tweetElements.forEach((tweet) => {
      const textElement = tweet.querySelector('[data-testid="tweetText"]');
      if (textElement && gmRegex.test(textElement.textContent)) {
        tweets.push({
          text: textElement.textContent,
          element: tweet
        });
      }
    });

    return tweets;
  }, config.regexPattern);

  console.log(`üîç Found ${gmTweets.length} matching tweets`);

  // –ï—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (config.commentTemplates && config.commentTemplates.gm && config.commentTemplates.gm.length > 0) {
    const templates = config.commentTemplates.gm;
    const randomComment = templates[Math.floor(Math.random() * templates.length)];

    console.log(`üí¨ Would comment with: ${randomComment}`);

    // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–∏—Ç–æ–≤
    // for (let i = 0; i < Math.min(gmTweets.length, 3); i++) {
    //   // –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // }
  } else {
    console.log('‚ÑπÔ∏è No comment templates provided, skipping comments');
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  return {
    success: true,
    tweetsFound: gmTweets.length,
    profile: profile.name,
    timestamp: Date.now()
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.ts
// –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ eval —ç—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = executeScript;
}